package com.robertx22.mmorpg;

import java.io.File;
import java.util.Arrays;

import org.apache.logging.log4j.LogManager;
import org.apache.logging.log4j.Logger;

import com.robertx22.capability.EntityData;
import com.robertx22.capability.EntityData.DefaultImpl;
import com.robertx22.capability.EntityData.IData;
import com.robertx22.capability.EntityData.Storage;
import com.robertx22.commands.GiveGear;
import com.robertx22.commands.GiveSocket;
import com.robertx22.crafting.SuffixReroll;
import com.robertx22.customitems.MyItems;
import com.robertx22.customitems.NewItemCreator;
import com.robertx22.onevent.OnLogin;
import com.robertx22.onevent.OnPlayerClone;
import com.robertx22.onevent.Item.OnPickup;
import com.robertx22.onevent.Item.OnTooltip;
import com.robertx22.onevent.combat.OnBurnStop;
import com.robertx22.onevent.combat.OnMobAttack;
import com.robertx22.onevent.combat.OnMobSpawn;
import com.robertx22.onevent.combat.OnMobsAttackEachOther;
import com.robertx22.onevent.combat.OnPlayerAttack;
import com.robertx22.onevent.gearupgrade.OnAnvilRepair;
import com.robertx22.onevent.gearupgrade.OnAnvilSetLevel;
import com.robertx22.onevent.gearupgrade.OnAnvilSocket;
import com.robertx22.onevent.gearupgrade.OnAnvilUpgrade;
import com.robertx22.onevent.loot.OnMobDeathDrops;
import com.robertx22.onevent.loot.OnMobDeathGetExp;
import com.robertx22.onevent.ontick.OnTickRegen;
import com.robertx22.onevent.ontick.OnTickRenderItemNames;
import com.robertx22.oregen.OreGen;

import baubles.api.BaubleType;
import baubles.api.IBauble;
import baubles.api.cap.BaubleItem;
import baubles.api.cap.BaublesCapabilities;
import baubles.api.cap.BaublesCapabilities.CapabilityBaubles;
import baubles.api.cap.BaublesContainer;
import baubles.api.cap.IBaublesItemHandler;
import baubles.common.CommonProxy;
import baubles.common.Config;
import baubles.common.event.CommandBaubles;
import baubles.common.network.PacketHandler;
import net.minecraft.item.crafting.IRecipe;
import net.minecraft.world.WorldServer;
import net.minecraftforge.common.DimensionManager;
import net.minecraftforge.common.MinecraftForge;
import net.minecraftforge.common.capabilities.CapabilityManager;
import net.minecraftforge.event.RegistryEvent;
import net.minecraftforge.fml.common.Mod;
import net.minecraftforge.fml.common.Mod.EventHandler;
import net.minecraftforge.fml.common.Mod.Instance;
import net.minecraftforge.fml.common.ModMetadata;
import net.minecraftforge.fml.common.SidedProxy;
import net.minecraftforge.fml.common.event.FMLInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPostInitializationEvent;
import net.minecraftforge.fml.common.event.FMLPreInitializationEvent;
import net.minecraftforge.fml.common.event.FMLServerStartedEvent;
import net.minecraftforge.fml.common.event.FMLServerStartingEvent;
import net.minecraftforge.fml.common.eventhandler.SubscribeEvent;
import net.minecraftforge.fml.common.network.NetworkRegistry;
import net.minecraftforge.fml.common.registry.GameRegistry;
import net.minecraftforge.registries.IForgeRegistry;

@Mod(modid = Ref.MODID, version = Ref.VERSION, name = Ref.NAME, guiFactory = "baubles.client.gui.BaublesGuiFactory", dependencies = "required-after:forge@[14.21.0.2348,);")
public class Main {

	@SidedProxy(clientSide = "baubles.client.ClientProxy", serverSide = "baubles.common.CommonProxy")
	public static CommonProxy proxy;

	@Instance(value = Ref.MODID)
	public static Main instance;

	public File modDir;

	public static final Logger log = LogManager.getLogger(Ref.MODID.toUpperCase());
	public static final int GUI = 0;

	@EventHandler
	public void serverLoad(FMLServerStartingEvent event) {
		event.registerServerCommand(new CommandBaubles());
	}

	@EventHandler
	public void start(FMLServerStartingEvent event) {
		event.registerServerCommand(new GiveGear());
		event.registerServerCommand(new GiveSocket());

	}

	@EventHandler
	public static void onWorldLoad(FMLServerStartedEvent event) {
		WorldServer world = DimensionManager.getWorld(0); // default world

		world.getGameRules().setOrCreateGameRule("mobGriefing", "false");
		world.getGameRules().setOrCreateGameRule("keepInventory", "true");
		world.getGameRules().setOrCreateGameRule("naturalRegeneration", "false");

	}

	@EventHandler
	public void preInit(FMLPreInitializationEvent event) {

		ModMetadata modMeta = event.getModMetadata();
		modMeta.name = Ref.NAME;
		modMeta.version = Ref.VERSION;
		modMeta.authorList = Arrays.asList(new String[] { "robertx22" });
		modMeta.autogenerated = false;
		modMeta.description = Ref.DESC;

		CapabilityManager.INSTANCE.register(IData.class, new Storage(), DefaultImpl.class);

		MinecraftForge.EVENT_BUS.register(new Main());
		MinecraftForge.EVENT_BUS.register(new EntityData());
		MinecraftForge.EVENT_BUS.register(new EntityData.EventHandler());
		MinecraftForge.EVENT_BUS.register(new OnMobDeathDrops());
		MinecraftForge.EVENT_BUS.register(new ModConfig());
		MinecraftForge.EVENT_BUS.register(new OnTooltip());
		MinecraftForge.EVENT_BUS.register(new OnLogin());
		MinecraftForge.EVENT_BUS.register(new OnPlayerAttack());
		MinecraftForge.EVENT_BUS.register(new OnPlayerClone());
		MinecraftForge.EVENT_BUS.register(new OnMobSpawn());
		MinecraftForge.EVENT_BUS.register(new OnMobAttack());
		MinecraftForge.EVENT_BUS.register(new OnTickRegen());
		MinecraftForge.EVENT_BUS.register(new OnBurnStop());
		MinecraftForge.EVENT_BUS.register(new OnMobDeathGetExp());
		MinecraftForge.EVENT_BUS.register(new OnMobsAttackEachOther());
		MinecraftForge.EVENT_BUS.register(new OnAnvilSocket());
		MinecraftForge.EVENT_BUS.register(new OnAnvilUpgrade());
		MinecraftForge.EVENT_BUS.register(new OnAnvilSetLevel());
		MinecraftForge.EVENT_BUS.register(new OnPickup());
		MinecraftForge.EVENT_BUS.register(new OnTickRenderItemNames());
		MinecraftForge.EVENT_BUS.register(new OnAnvilRepair());

		NewItemCreator.createCustomItems();

		// Baubles stuff
		modDir = event.getModConfigurationDirectory();

		try {
			Config.initialize(event.getSuggestedConfigurationFile());
		} catch (Exception e) {
			log.error("BAUBLES has a problem loading it's configuration");
		} finally {
			if (Config.config != null)
				Config.save();
		}

		CapabilityManager.INSTANCE.register(IBaublesItemHandler.class, new CapabilityBaubles<IBaublesItemHandler>(),
				BaublesContainer.class);

		CapabilityManager.INSTANCE.register(IBauble.class, new BaublesCapabilities.CapabilityItemBaubleStorage(),
				() -> new BaubleItem(BaubleType.TRINKET));

		proxy.registerEventHandlers();
		PacketHandler.init();

		Config.save();
		// baubles

	}

	@SubscribeEvent
	public void registerRecipes(RegistryEvent.Register<IRecipe> event) {
		IForgeRegistry<IRecipe> r = event.getRegistry();
		r.register(new SuffixReroll());
		System.out.println("Registering recipes");
	}

	@EventHandler
	public void init(FMLInitializationEvent event) {

		// baubles
		NetworkRegistry.INSTANCE.registerGuiHandler(instance, proxy);
		proxy.init();
		//

		GameRegistry.registerWorldGenerator(new OreGen(MyItems.magic_ore_block, 7, 10, 50, 7), 0);
		GameRegistry.registerWorldGenerator(new OreGen(MyItems.rare_ore_block, 6, 10, 40, 5), 0);
		GameRegistry.registerWorldGenerator(new OreGen(MyItems.epic_ore_block, 5, 10, 35, 3), 0);
		GameRegistry.registerWorldGenerator(new OreGen(MyItems.legendary_ore_block, 5, 10, 30, 2), 0);
		GameRegistry.registerWorldGenerator(new OreGen(MyItems.mythical_ore_block, 4, 10, 30, 1), 0);

	}

	@EventHandler
	public void postInit(FMLPostInitializationEvent event) {

	}

}
